/* 
 * Copyright (C) 2020 Imperial College London.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 * 
 * @author <sunil.kumar@imperial.ac.uk>
 */
package MM2.openFLIM_GOI.UI;

import java.util.ArrayList;

/**
 *
 * @author Fogim
 */
public class infopanel extends javax.swing.JPanel {

    private String infopanel_string = "No messages";
    private ArrayList<String> ip_messages = new ArrayList<String>();
    
    /**
     * Creates new form infopanel
     */
    public infopanel() {
        initComponents();
    }

    public void update_ip(){
        infopanel_string = "";
        for(int i=0; i< ip_messages.size(); i++){
            infopanel_string+= ip_messages.get(i);
        }
        ip_textarea.setText(infopanel_string);
    }
    
    public void set_messages(ArrayList<String> new_messages){
        ip_messages = new_messages;
        update_ip();
    }
    
    public void add_message(String message){
        if(ip_messages.contains(message)){
            //Already there
        } else {
            ip_messages.add(message);
            update_ip();
            //System.out.println(message);//For debug
        }
    }

    public void remove_exact_message(String message){
        if(ip_messages.contains(message)){
            ip_messages.remove(message);
            update_ip();
        }
    }    
    
    public void remove_message_containing(String searchstring){
        ArrayList<String> tmp_arr = new ArrayList<String>();
        for (String msg:ip_messages){
            if(!msg.contains(searchstring)){
                tmp_arr.add(msg);
            }
        }
        ip_messages = tmp_arr;
        update_ip();
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ip_textarea = new javax.swing.JTextArea();

        ip_textarea.setColumns(20);
        ip_textarea.setLineWrap(true);
        ip_textarea.setRows(5);
        jScrollPane1.setViewportView(ip_textarea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ip_textarea;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
